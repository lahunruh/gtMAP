// Generated by rstantools.  Do not edit by hand.

/*
    gtMAP is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    gtMAP is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with gtMAP.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_GT_bayesian_logsumexp_optim_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_GT_bayesian_logsumexp_optim");
    reader.add_event(98, 96, "end", "model_GT_bayesian_logsumexp_optim");
    return reader;
}
#include <stan_meta_header.hpp>
class model_GT_bayesian_logsumexp_optim
  : public stan::model::model_base_crtp<model_GT_bayesian_logsumexp_optim> {
private:
        int N;
        int T;
        vector_d Ct;
        matrix_d M;
        int n;
        double sigma;
        double alpha;
        double beta;
        double a;
        double b;
        double m;
        double s;
        std::vector<int> w;
        double p;
        double ctbase;
        double ctmult;
        std::vector<double> x_r;
public:
    model_GT_bayesian_logsumexp_optim(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_GT_bayesian_logsumexp_optim(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_GT_bayesian_logsumexp_optim_namespace::model_GT_bayesian_logsumexp_optim";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "T", "int", context__.to_vec());
            T = int(0);
            vals_i__ = context__.vals_i("T");
            pos__ = 0;
            T = vals_i__[pos__++];
            check_greater_or_equal(function__, "T", T, 0);
            current_statement_begin__ = 4;
            validate_non_negative_index("Ct", "T", T);
            context__.validate_dims("data initialization", "Ct", "vector_d", context__.to_vec(T));
            Ct = Eigen::Matrix<double, Eigen::Dynamic, 1>(T);
            vals_r__ = context__.vals_r("Ct");
            pos__ = 0;
            size_t Ct_j_1_max__ = T;
            for (size_t j_1__ = 0; j_1__ < Ct_j_1_max__; ++j_1__) {
                Ct(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 5;
            validate_non_negative_index("M", "T", T);
            validate_non_negative_index("M", "N", N);
            context__.validate_dims("data initialization", "M", "matrix_d", context__.to_vec(T,N));
            M = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(T, N);
            vals_r__ = context__.vals_r("M");
            pos__ = 0;
            size_t M_j_2_max__ = N;
            size_t M_j_1_max__ = T;
            for (size_t j_2__ = 0; j_2__ < M_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < M_j_1_max__; ++j_1__) {
                    M(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, 0);
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "sigma", "double", context__.to_vec());
            sigma = double(0);
            vals_r__ = context__.vals_r("sigma");
            pos__ = 0;
            sigma = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma", sigma, 0);
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "alpha", "double", context__.to_vec());
            alpha = double(0);
            vals_r__ = context__.vals_r("alpha");
            pos__ = 0;
            alpha = vals_r__[pos__++];
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "beta", "double", context__.to_vec());
            beta = double(0);
            vals_r__ = context__.vals_r("beta");
            pos__ = 0;
            beta = vals_r__[pos__++];
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "a", "double", context__.to_vec());
            a = double(0);
            vals_r__ = context__.vals_r("a");
            pos__ = 0;
            a = vals_r__[pos__++];
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "b", "double", context__.to_vec());
            b = double(0);
            vals_r__ = context__.vals_r("b");
            pos__ = 0;
            b = vals_r__[pos__++];
            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "m", "double", context__.to_vec());
            m = double(0);
            vals_r__ = context__.vals_r("m");
            pos__ = 0;
            m = vals_r__[pos__++];
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "s", "double", context__.to_vec());
            s = double(0);
            vals_r__ = context__.vals_r("s");
            pos__ = 0;
            s = vals_r__[pos__++];
            current_statement_begin__ = 14;
            validate_non_negative_index("w", "N", N);
            context__.validate_dims("data initialization", "w", "int", context__.to_vec(N));
            w = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("w");
            pos__ = 0;
            size_t w_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < w_k_0_max__; ++k_0__) {
                w[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 15;
            context__.validate_dims("data initialization", "p", "double", context__.to_vec());
            p = double(0);
            vals_r__ = context__.vals_r("p");
            pos__ = 0;
            p = vals_r__[pos__++];
            check_greater_or_equal(function__, "p", p, 0);
            check_less_or_equal(function__, "p", p, 1);
            current_statement_begin__ = 16;
            context__.validate_dims("data initialization", "ctbase", "double", context__.to_vec());
            ctbase = double(0);
            vals_r__ = context__.vals_r("ctbase");
            pos__ = 0;
            ctbase = vals_r__[pos__++];
            current_statement_begin__ = 17;
            context__.validate_dims("data initialization", "ctmult", "double", context__.to_vec());
            ctmult = double(0);
            vals_r__ = context__.vals_r("ctmult");
            pos__ = 0;
            ctmult = vals_r__[pos__++];
            // initialize transformed data variables
            current_statement_begin__ = 21;
            validate_non_negative_index("x_r", "1", 1);
            x_r = std::vector<double>(1, double(0));
            stan::math::fill(x_r, DUMMY_VAR__);
            stan::math::assign(x_r,rep_array(0.0, 1));
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 25;
            validate_non_negative_index("Ct_ind", "N", N);
            num_params_r__ += N;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_GT_bayesian_logsumexp_optim() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 25;
        if (!(context__.contains_r("Ct_ind")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable Ct_ind missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("Ct_ind");
        pos__ = 0U;
        validate_non_negative_index("Ct_ind", "N", N);
        context__.validate_dims("parameter initialization", "Ct_ind", "vector_d", context__.to_vec(N));
        Eigen::Matrix<double, Eigen::Dynamic, 1> Ct_ind(N);
        size_t Ct_ind_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < Ct_ind_j_1_max__; ++j_1__) {
            Ct_ind(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, Ct_ind);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable Ct_ind: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 25;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Ct_ind;
            (void) Ct_ind;  // dummy to suppress unused var warning
            if (jacobian__)
                Ct_ind = in__.vector_lb_constrain(0, N, lp__);
            else
                Ct_ind = in__.vector_lb_constrain(0, N);
            // transformed parameters
            current_statement_begin__ = 30;
            validate_non_negative_index("Ct_pred", "T", T);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Ct_pred(T);
            stan::math::initialize(Ct_pred, DUMMY_VAR__);
            stan::math::fill(Ct_pred, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 32;
            stan::math::assign(Ct_pred, rep_vector(0, T));
            current_statement_begin__ = 34;
            for (int i = 1; i <= T; ++i) {
                current_statement_begin__ = 35;
                for (int j = 1; j <= N; ++j) {
                    current_statement_begin__ = 36;
                    if (as_bool(logical_gt(get_base1(M, i, j, "M", 1), 0))) {
                        current_statement_begin__ = 37;
                        if (as_bool(logical_gt(get_base1(w, j, "w", 1), 0))) {
                            current_statement_begin__ = 38;
                            stan::model::assign(Ct_pred, 
                                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                        (get_base1(Ct_pred, i, "Ct_pred", 1) + ((get_base1(M, i, j, "M", 1) * stan::math::exp2((ctbase - get_base1(Ct_ind, j, "Ct_ind", 1)))) * ctmult)), 
                                        "assigning variable Ct_pred");
                        }
                    }
                }
            }
            current_statement_begin__ = 45;
            for (int i = 1; i <= T; ++i) {
                current_statement_begin__ = 46;
                if (as_bool(logical_gt(get_base1(Ct_pred, i, "Ct_pred", 1), 0))) {
                    current_statement_begin__ = 47;
                    stan::model::assign(Ct_pred, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (ctbase - stan::math::log2((get_base1(Ct_pred, i, "Ct_pred", 1) / (ctmult * sum(stan::model::rvalue(M, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "M")))))), 
                                "assigning variable Ct_pred");
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 30;
            size_t Ct_pred_j_1_max__ = T;
            for (size_t j_1__ = 0; j_1__ < Ct_pred_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(Ct_pred(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: Ct_pred" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Ct_pred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            {
            current_statement_begin__ = 53;
            int sumW(0);
            (void) sumW;  // dummy to suppress unused var warning
            stan::math::fill(sumW, std::numeric_limits<int>::min());
            current_statement_begin__ = 55;
            stan::math::assign(sumW, sum(w));
            current_statement_begin__ = 57;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 58;
                if (as_bool(logical_neq(get_base1(w, i, "w", 1), 0))) {
                    current_statement_begin__ = 59;
                    lp_accum__.add(normal_log(get_base1(Ct_ind, i, "Ct_ind", 1), m, s));
                }
            }
            current_statement_begin__ = 66;
            lp_accum__.add(normal_log<propto__>(Ct, Ct_pred, sigma));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("Ct_ind");
        names__.push_back("Ct_pred");
        names__.push_back("total");
        names__.push_back("Ct_pred_out");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_GT_bayesian_logsumexp_optim_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> Ct_ind = in__.vector_lb_constrain(0, N);
        size_t Ct_ind_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < Ct_ind_j_1_max__; ++j_1__) {
            vars__.push_back(Ct_ind(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 30;
            validate_non_negative_index("Ct_pred", "T", T);
            Eigen::Matrix<double, Eigen::Dynamic, 1> Ct_pred(T);
            stan::math::initialize(Ct_pred, DUMMY_VAR__);
            stan::math::fill(Ct_pred, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 32;
            stan::math::assign(Ct_pred, rep_vector(0, T));
            current_statement_begin__ = 34;
            for (int i = 1; i <= T; ++i) {
                current_statement_begin__ = 35;
                for (int j = 1; j <= N; ++j) {
                    current_statement_begin__ = 36;
                    if (as_bool(logical_gt(get_base1(M, i, j, "M", 1), 0))) {
                        current_statement_begin__ = 37;
                        if (as_bool(logical_gt(get_base1(w, j, "w", 1), 0))) {
                            current_statement_begin__ = 38;
                            stan::model::assign(Ct_pred, 
                                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                        (get_base1(Ct_pred, i, "Ct_pred", 1) + ((get_base1(M, i, j, "M", 1) * stan::math::exp2((ctbase - get_base1(Ct_ind, j, "Ct_ind", 1)))) * ctmult)), 
                                        "assigning variable Ct_pred");
                        }
                    }
                }
            }
            current_statement_begin__ = 45;
            for (int i = 1; i <= T; ++i) {
                current_statement_begin__ = 46;
                if (as_bool(logical_gt(get_base1(Ct_pred, i, "Ct_pred", 1), 0))) {
                    current_statement_begin__ = 47;
                    stan::model::assign(Ct_pred, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (ctbase - stan::math::log2((get_base1(Ct_pred, i, "Ct_pred", 1) / (ctmult * sum(stan::model::rvalue(M, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "M")))))), 
                                "assigning variable Ct_pred");
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t Ct_pred_j_1_max__ = T;
                for (size_t j_1__ = 0; j_1__ < Ct_pred_j_1_max__; ++j_1__) {
                    vars__.push_back(Ct_pred(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 71;
            double total;
            (void) total;  // dummy to suppress unused var warning
            stan::math::initialize(total, DUMMY_VAR__);
            stan::math::fill(total, DUMMY_VAR__);
            current_statement_begin__ = 72;
            validate_non_negative_index("Ct_pred_out", "T", T);
            Eigen::Matrix<double, Eigen::Dynamic, 1> Ct_pred_out(T);
            stan::math::initialize(Ct_pred_out, DUMMY_VAR__);
            stan::math::fill(Ct_pred_out, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 74;
            stan::math::assign(Ct_pred_out, rep_vector(0, T));
            current_statement_begin__ = 76;
            for (int i = 1; i <= T; ++i) {
                current_statement_begin__ = 77;
                for (int j = 1; j <= N; ++j) {
                    current_statement_begin__ = 78;
                    if (as_bool(logical_gt(get_base1(M, i, j, "M", 1), 0))) {
                        current_statement_begin__ = 79;
                        if (as_bool(logical_gt(get_base1(w, j, "w", 1), 0))) {
                            current_statement_begin__ = 80;
                            stan::model::assign(Ct_pred_out, 
                                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                        (get_base1(Ct_pred_out, i, "Ct_pred_out", 1) + ((get_base1(M, i, j, "M", 1) * stan::math::exp2((ctbase - get_base1(Ct_ind, j, "Ct_ind", 1)))) * ctmult)), 
                                        "assigning variable Ct_pred_out");
                        }
                    }
                }
            }
            current_statement_begin__ = 86;
            for (int i = 1; i <= T; ++i) {
                current_statement_begin__ = 87;
                if (as_bool(logical_gt(get_base1(Ct_pred_out, i, "Ct_pred_out", 1), 0))) {
                    current_statement_begin__ = 88;
                    stan::model::assign(Ct_pred_out, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (ctbase - stan::math::log2((get_base1(Ct_pred_out, i, "Ct_pred_out", 1) / (ctmult * sum(stan::model::rvalue(M, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "M")))))), 
                                "assigning variable Ct_pred_out");
                }
            }
            current_statement_begin__ = 92;
            stan::math::assign(total, 0);
            current_statement_begin__ = 93;
            for (int i = 1; i <= T; ++i) {
                current_statement_begin__ = 94;
                stan::math::assign(total, (total + stan::math::abs((get_base1(Ct, i, "Ct", 1) - get_base1(Ct_pred_out, i, "Ct_pred_out", 1)))));
            }
            // validate, write generated quantities
            current_statement_begin__ = 71;
            vars__.push_back(total);
            current_statement_begin__ = 72;
            size_t Ct_pred_out_j_1_max__ = T;
            for (size_t j_1__ = 0; j_1__ < Ct_pred_out_j_1_max__; ++j_1__) {
                vars__.push_back(Ct_pred_out(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_GT_bayesian_logsumexp_optim";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t Ct_ind_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < Ct_ind_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Ct_ind" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t Ct_pred_j_1_max__ = T;
            for (size_t j_1__ = 0; j_1__ < Ct_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Ct_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "total";
        param_names__.push_back(param_name_stream__.str());
        size_t Ct_pred_out_j_1_max__ = T;
        for (size_t j_1__ = 0; j_1__ < Ct_pred_out_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Ct_pred_out" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t Ct_ind_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < Ct_ind_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Ct_ind" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t Ct_pred_j_1_max__ = T;
            for (size_t j_1__ = 0; j_1__ < Ct_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Ct_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "total";
        param_names__.push_back(param_name_stream__.str());
        size_t Ct_pred_out_j_1_max__ = T;
        for (size_t j_1__ = 0; j_1__ < Ct_pred_out_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Ct_pred_out" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_GT_bayesian_logsumexp_optim_namespace::model_GT_bayesian_logsumexp_optim stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
